-- BigData SQL assignment
show databases;

use BigDataPractice;

/* Question 1:
Write a query to display the columns in a specific order, such 
as order date, salesman ID, order number, and purchase amount 
for all orders. */

create table if not exists BigDataPractice.order_table_assgnmt(
	ord_no int not null Primary key,
    purch_amt float not null,
    ord_date date default (CURRENT_DATE),
    customer_id int not null,
    salesman_id int not null,
    constraint unique_ord_no unique(ord_no)
);

-- inserting multiple records into order_table_assgnmt
insert into BigDataPractice.order_table_assgnmt (ord_no,
											  purch_amt,
                                              ord_date,
                                              customer_id,
                                              salesman_id)
		values (70001, 150.5, "2012-10-05", 3005, 5002),
				(70009, 270.65, "2012-09-10", 3001, 5005),
                (70002, 65.26, "2012-10-05", 3002, 5001),
                (70004, 110.5, "2012-08-17", 3009, 5003),
                (70007, 984.5, "2012-09-10", 3005, 5002),
                (70005, 2400.6, "2012-07-27", 3007, 5001),
                (70008, 5760, "2012-09-10", 3002, 5001),
                (70010, 198.43, "2012-10-10", 3004, 5006),
                (70003, 2480.4, "2012-10-10", 3009, 5003),
                (70012, 250.45, "2012-06-27", 3008, 5002),
                (70011, 75.29, "2012-08-17", 3003, 5007),
                (70013, 3045.6, "2012-04-25", 3002, 5001);
                
-- Question 1 SOLUTION
-- Ordering based on the higest purchases made
select * 
	from BigDataPractice.order_table_assgnmt
    order by purch_amt desc;
    
-- Ordering based on ord_date from lowest to highest
select * 
	from BigDataPractice.order_table_assgnmt
    order by ord_date;
    
-- practice use case: finding the max amount purchased in a given day
select * 
	from BigDataPractice.order_table_assgnmt
    where purch_amt in (
						select max(purch_amt) max_days_purchase
							from BigDataPractice.order_table_assgnmt
							group by ord_date)
	order by 2 desc;



/* Question 2:
From the following table, write a SQL query to locate 
salespeople who live in the city of 'Paris'. 
Return salesperson's name, city. */

create table if not exists BigDataPractice.sales_table_assgnmt(
	salesman_id int not null unique primary key,
    name varchar(50),
    city varchar(20),
    commission float not null
);

-- inserting multiple records into sales_table_assgnmt
insert into BigDataPractice.sales_table_assgnmt (salesman_id,
											  name,
                                              city,
                                              commission)
		values (5001, "James Hoog", "New York", 0.15),
                (5002, "Nail Knite", "Paris", 0.13),
                (5005, "Pit Alex", "London", 0.11),
                (5006, "Mc Lyon", "Paris", 0.14),
                (5007, "Paul Adam", "Rome", 0.13),
                (5003, "Lauson Hen", "San Jose", 0.12);
                
-- Question 2 SOLUTION
select name as salesman_name,
		city as salesman_city
	from BigDataPractice.sales_table_assgnmt
    where city = "Paris";
    
-- Practice use case question: least 3 people with the lowest commission
select *
	from BigDataPractice.sales_table_assgnmt
    order by commission 
    limit 3;
    
    
/* Question 3:
From the following table, write a SQL query to select a range of
products whose price is in the range Rs.200 to Rs.600. 
Begin and end values are included. Return pro_id, pro_name, 
pro_price, and pro_com. */

create table if not exists BigDataPractice.hardware_products_table_assgnmt(
	pro_id int unique primary key not null auto_increment,
    pro_name varchar(50),
    pro_price float,
    pro_com int
);

-- inserting multiple records into hardware_products_table_assgnmt
insert into BigDataPractice.hardware_products_table_assgnmt (pro_id,
											  pro_name,
                                              pro_price,
                                              pro_com)
		values (101, "Motherboard", 3200.00, 15),
				(null, "Keyboard", 450.00, 16),
                (null, "ZIP drive", 250.00, 14),
                (null, "Speaker", 550.00, 16),
                (null, "Monitor", 5000.00, 11),
                (null, "DVD drive", 900.00, 12),
				(null, "CD drive", 800.00, 12),
				(null, "Printer", 2600.00, 13),
				(null, "Refill cartridge", 350.00, 13),
				(null, "Mouse", 250.00, 12);
    
-- Question 3 SOLUTION
select * 
	from BigDataPractice.hardware_products_table_assgnmt
    where pro_price between 200 and 600;
    

    
    
/* Question 4:
From the following table, write a SQL query to find the items 
whose prices are higher than $550. Order the product price in 
descending, the product name in ascending */

-- Table to query: BigDataPractice.hardware_products_table_assgnmt
-- Question 4 SOLUTION
select *
	from BigDataPractice.hardware_products_table_assgnmt
    where pro_price >= 550
    order by pro_price desc, pro_name;
    
    
    
/* Question 5:
From the following table, write a SQL query to find the details
of all orders excluding those with ord_date equal to '2012-09-10'
and salesman_id higher than 5005 or purch_amt greater than 1000.
Return ord_no, purch_amt, ord_date, customer_id and salesman_id */

-- Table to query: BigDataPractice.order_table_assgnmt
-- Question 5 SOLUTION
select * 
	from BigDataPractice.order_table_assgnmt
    where ord_date != "2012-09-10"
    and (salesman_id < 5005 and purch_amt < 1000);
    
    
    
/* Question 6:
Create the table world with your schema and find the below queries
1. Write a query to fetch which country has the highest population.
2. Write a query to fetch the name of country with the least gdp?
3. Write a query to fetch the name of the country which ends with letter C?
4. Write a query to fetch the name of the country which ends with letter D?
5. Write a query to fetch which continent has highest gdp?
6. Give the total GDP of africa?
7. Write a query to fetch the total population of each continent?
8. For each relevant continent show the number of countries that
has a population of at least 2000000? */

-- Question 6 SOLUTION
create table if not exists BigDataPractice.world(
	name varchar(100),
    continent varchar(50),
    area int,
    population int,
    gdp bigint
);

-- inserting multiple records into world table
insert into BigDataPractice.world (name,
								  continent,
								  area,
								  population,
                                  gdp)
		values ("Afghanistan", "Asia", 652230, 25500100, 20343000000),
				("Albania", "Europe", 28748, 2831741, 12960000000),
                ("Algeria", "Africa", 2381741, 37100000, 188681000000),
                ("Andorra", "Andorra", 468, 78115, 3712000000),
                ("Angola", "Africa", 1246700, 20609294, 100990000000),
                ("Dominican Republic", "Caribbean", 48671, 9445281, 58898000000),
                ("China", "Asia", 9596961, 1365370000, 8358400000000),
                ("Colombia", "South America", 1141748, 47662000, 369813000000),
                ("Comoros", "Africa", 1862, 743798, 616000000),
                ("Denmark", "Europe", 43094, 5634437, 314889000000),
                ("Djibouti", "Africa", 23200, 886000, 1361000000),
                ("Dominica", "Caribbean", 751, 71293, 499000000);



-- Question 6 SOLUTION (1)
select name as country, population as max_population
	from BigDataPractice.world
	where population = (select max(population)
								from BigDataPractice.world);


-- Question 6 SOLUTION (2)
select name as country, gdp as lowest_gdp
	from BigDataPractice.world
	order by gdp 
    limit 1;
    
    
-- Question 6 SOLUTION (3)
select name as name_ending_with_c
	from BigDataPractice.world
    where name like "%C";
    
-- Question 6 SOLUTION (4)
select name as names_starting_with_d
	from BigDataPractice.world
    where name like "D%";
    
-- Question 6 SOLUTION (5)
select name as country, gdp as highest_gdp 
	from BigDataPractice.world
	order by gdp 
    limit 1;
    
-- Question 6 SOLUTION (6)
select continent, sum(gdp) as africas_total_gdp
	from BigDataPractice.world
    group by continent
    having continent = "Africa";
    
    
-- Question 6 SOLUTION (7)
select continent, sum(population) as total_population
	from BigDataPractice.world
    group by continent
    order by total_population;
    
    
-- Question 6 SOLUTION (8)
select *
	from BigDataPractice.world
    where population <= 200000000
    order by continent;
    


/* Question 7: 
Questions :
q1. write a query to fetch the names of the students having maximum marks in each
course?
q2. write a query to fetch the names of the students having 3th highest marks from each
course?
q3. write a query to fetch the names of the students having minimum marks in each course?
q4. write a query to fetch the names of the students having 4th least marks from each
course?
q5. write a query to fetch the city name of the students who have 2nd highest marks?
q6. write a query to fetch the count of each city?
q7. write a query to fetch the names of the students who are from the same city?
q8.write a query to fetch the names of students starting with 'A'?
q9.write a query to fetch the count of students' names having the same marks in each
course?
q10.write a query to fetch the count of students from each city?*/
-- creating students table
create table if not exists BigDataPractice.students (
	student_id int,
    student_name varchar(60) not null,
    city varchar(60) not null,
    primary key(student_id)
);

-- creating course table
create table if not exists BigDataPractice.course (
	student_id int,
    course_name varchar(60) not null,
    marks int not null,
    primary key(student_id),
    foreign key(student_id) references students(student_id)
);

-- inserting data into students table.
insert into BigDataPractice.students
			values(200,'John Doe','Delhi'),
					(210,'John Doe','Delhi'),
					(220,'Moon ethan','Rajasthan'),
					(230,'Jessie','Bangalore'),
					(240,'Benbrook','Bihar'),
					(250,'Ethan','Bihar'),
					(260,'Johnnie','Bangalore'),
					(270,'Goh','Delhi'),(380,'John Doe','Delhi'),
					(280,'Pavi','Delhi'),
					(290,'Sanvi','Rajasthan'),
					(300,'Navyaa','Bangalore'),
					(310,'Ankul','Bihar'),
					(311,'Hitanshi','Bihar'),
					(312,'Aayush','Bangalore'),
					(313,'Rian','Delhi');



-- inserting data into course table.
insert into BigDataPractice.course
				values(200,'Datascience',75),
						(210,'Datascience',75),
						(220,'Dataanalyst',80),
						(230,'Dataanalyst',80),
						(240,'Dataanalyst',84),
						(250,'Dataanalyst',50),
						(260,'Datascience',80),
						(270,'Datascience',99),
						(380,'Datascience',45),
						(280,'Datascience',78),
						(290,'Dataanalyst',78),
						(300,'Computer vision',90),
						(310,'Computer vision',90),
						(311,'Computer vision',75),
						(312,'Computer vision',39);
                        
                        
-- Question 7 SOLUTION (1)
with highest_course_score as (
							select tmp.*
								from (
									select c.*,
											row_number() over (
																partition by c.course_name order by c.marks desc
																) as position
										from BigDataPractice.course as c
										) as tmp
								where tmp.position = 1
							)
                            
select s.student_id,
		s.student_name,
        hcs.course_name,
        hcs.marks,
        hcs.position
	from BigDataPractice.students as s
    inner join highest_course_score as hcs
    on s.student_id = hcs.student_id;
    
-- Question 7 SOLUTION(2)
with highest_course_score as (
							select tmp.*
								from (
									select c.*,
											dense_rank() over (
																partition by c.course_name order by c.marks desc
																) as position
										from BigDataPractice.course as c
										) as tmp
								-- where tmp.position = 3
							)
                            
select s.student_id,
		s.student_name,
        hcs.course_name,
        hcs.marks,
        hcs.position
	from BigDataPractice.students as s
    inner join highest_course_score as hcs
    on s.student_id = hcs.student_id;
    

-- Question 7 SOLUTION(3)
with lowest_score_details as (
							select c.student_id,
									l_scores.course_name,
									l_scores.lowest_marks
								from (
									select c.course_name,
											min(c.marks) as lowest_marks
										from BigDataPractice.course as c
										group by c.course_name 
									) as l_scores
								inner join BigDataPractice.course as c
								on c.course_name = l_scores.course_name
								and c.marks = l_scores.lowest_marks
                                )
                                
select s.student_id,
		s.student_name,
		lsd.course_name,
        lsd.lowest_marks
	from BigDataPractice.students as s
    inner join lowest_score_details as lsd
    on s.student_id = lsd.student_id;
    
    
-- Question 7 SOLUTION(4)
with highest_course_score as (
							select tmp.*
								from (
									select c.*,
											rank() over (
																partition by c.course_name order by c.marks desc
																) as position
										from BigDataPractice.course as c
										) as tmp
								where tmp.position = 4
							)
                            
select s.student_id,
		s.student_name,
        hcs.course_name,
        hcs.marks,
        hcs.position
	from BigDataPractice.students as s
    inner join highest_course_score as hcs
    on s.student_id = hcs.student_id;
    
-- Question 7 SOLUTION(5)
with highest_course_score as (
							select tmp.*
								from (
									select c.*,
											dense_rank() over (
																partition by c.course_name order by c.marks desc
																) as position
										from BigDataPractice.course as c
										) as tmp
								where tmp.position = 2
							)
                            
select s.student_id,
		s.student_name,
        hcs.course_name,
        hcs.marks,
        hcs.position
	from BigDataPractice.students as s
    inner join highest_course_score as hcs
    on s.student_id = hcs.student_id;
    
-- Question 7 SOLUTION(6)
select s.city,
		count(*) as city_count
	from BigDataPractice.students as s
    group by s.city;
    
-- Question 7 SOLUTION(7)
select s.*
	from BigDataPractice.students as s
    order by s.city;

    
-- Question 7 SOLUTION(8)
select s.student_id,
		s.student_name
	from BigDataPractice.students as s
    where s.student_name like "A%";
    
-- Question 7 SOLUTION(9)
with highest_course_score as (
							select tmp.*
								from (
									select c.*,
											rank() over (
															partition by c.course_name order by c.marks desc
														) as position
										from BigDataPractice.course as c
										) as tmp
							)
                            
select
        hcs.course_name,
        count(hcs.marks) as no_of_stu_with_same_marks
	from BigDataPractice.students as s
    inner join highest_course_score as hcs
    on s.student_id = hcs.student_id
    group by hcs.course_name, hcs.position
    having count(hcs.position) > 1;
    
-- Question 7 SOLUTION(10)
select s.city,
		count(*) as total_stu_count
	from BigDataPractice.students as s
    group by s.city;

/* Question 8: 
Write an SQL query to report the first login date for each player.
Return the result table in any order.
The query result format is in the following example.*/

create table BigDataPractice.activity_table (
	player_id int,
	device_id int,
    event_date date,
    games_played int,
    primary key(player_id, event_date)
);

-- inserting data into activity table
insert into BigDataPractice.activity_table 
	values (1, 2, "2016-03-01", 5),
		(1, 2, "2016-05-02", 6),
		(2, 3, "2017-06-25", 1),
		(3, 1, "2016-03-02", 0),
		(3, 4, "2018-07-03", 5);

-- Question 8: SOLUTION --
select player_id, min(event_date)
	from BigDataPractice.activity_table
    group by player_id;


/* Question 9: 
Write an SQL query to find the ids of products that are both 
low fat and recyclable.
Return the result table in any order.
*/
create table BigDataPractice.products_table (
	product_id int,
	low_fats enum("Y", "N"),
    recyclable enum("Y", "N"),
    primary key(product_id)
);

-- inserting data into products_table
insert into BigDataPractice.products_table 
				values (0, "Y","N"),
						(1,"Y","Y"),
						(2, "N","Y"),
						(3,"Y","Y"),
						(4,"N","N");


-- Question 9 SOLUTION
select product_id as product_id_with_low_fats_and_recyclable from
	BigDataPractice.products_table
    where low_fats = "Y" and recyclable = "Y";
    
    
/* Question 10: 
	Answer following questions using BigDataPractice.world table
1. Select the statement that shows the sum of population of all countries i
2. Select the statement that shows the number of countries with population smaller
than 150000
3. Select the list of core SQL aggregate functions
4. Select the result that would be obtained from the following code.
5. Select the statement that shows the average population of 'Poland', 'Germany' and
'Denmark'
6. Select the statement that shows the medium population density of each region
7. Select the statement that shows the name and population density of the country
with the largest population
*/


-- Question 10 SOLUTION (1)
select sum(population) as total_population
	from BigDataPractice.world;
    
-- Question 10 SOLUTION (2)
select name as country, population
	from BigDataPractice.world
    where population < 150000;
    
-- Question 10 SOLUTION (6)
select continent, 
		sum(population) as total_population,
        sum(area) as total_area,
        (sum(population)/sum(area)) as population_density
        
	from BigDataPractice.world
    group by continent;
    
    
-- Question 10 SOLUTION (7)
select name, 
		population,
        (population/area) as population_density
        
	from BigDataPractice.world
    order by population desc
    limit 1;
    

